@model IEnumerable<TrialLovesProject.Models.StorePrice>

@{
    ViewBag.Title = "PriceChecker";
   
}

<script src="~/Content/FileSaver.js"></script>
<script>
    function fnExcelReport(id, name) {
        var tab_text = '<html xmlns: x=urn:schemas-microsoft-com:office:excel">';
        tab_text = tab_text + '<head><xml><x: EscelWorkbook><x: ExcelWorksheets><x: ExcelWorksheet>';
        tab_text = tab_text + '<x: Name>Test Sheet</x:Name>';
        tab_text = tab_text + '<x: WorksheetOptions><x: Panes></x: Panes></x: WorksheetOptions></x: ExcelWorksheet>';
        tab_text = tab_text + '</x:ExcelWorksheets></x:ExcelWorkbook></xml></head><body>';
        tab_text = tab_text + "<table border = '1px' style='color:black'>";

        var exportTable = $('a' + id).clone();
        exportTable.find('input').each(function (PriceChecker, elem) { $(elem).remove(); })
        exportTable.find('a').each(function (PriceChecker, elem) { $(elem).remove(); })
        tab_text = tab_text + exportTable.html();
        tab_text = tab_text + '</table></body></html>';
        var fileName = "Demo" + '.xls';

        var blob = new Blob([tab_text], { type: "application/vnd.ms-excel;charset=utf-8" })
        window.saveAs(blob, fileName);


    }

</script>







<h2>Price Checker</h2>



<table class="table table-bordered table-responsive" id="dataTable" >
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Store.StoreId)
        </th>
        <th>
            Grade
        </th>

        <th>
            @Html.DisplayNameFor(model => model.PreviousPrice)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.NewPrice)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.PriceDifference)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.TimeStamp)
        </th>



    </tr>


        @foreach (var item in Model)
        {


        <tr>
            <td id="oneid">
                @item.Store.StoreId
                
            </td>
            <td id="1grade">
                Unleaded
            </td>
            <td id="1previous">
                @item.PreviousPrice.ToString("N2")

            </td>
            <td id="1new">
                @item.NewPrice.ToString("N2")
            </td>
            <td id="1diff">
                @((item.NewPrice - item.PreviousPrice).ToString("N2"))
            </td>
            <td id="1time">
                @DateTime.Now
            </td>
            <td hidden>@(item.Grade1.GradeId = 1)</td>

        </tr>
        <tr>


            <td>
                @item.Store.StoreId
            </td>
            <td>
                Super

            </td>
            <td>
                @((item.PreviousPrice + item.Store.Threshold).ToString("N2"))
            </td>
            <td>
                @((item.NewPrice + item.Store.Threshold).ToString("N2"))
            </td>
            <td>
                @(((item.NewPrice + item.Store.Threshold)- (item.PreviousPrice + item.Store.Threshold)).ToString("N2"))
            </td>
            <td>
                @DateTime.Now
            </td>
            <td hidden>
                @(item.Grade1.GradeId = 2)
            </td>

        </tr>

        <tr>


            <td>
                @item.Store.StoreId
            </td>
            <td>
                Plus

            </td>
            <td>
                @((item.PreviousPrice + item.Store.Threshold + item.Store.Threshold).ToString("N2"))
            </td>
            <td>
                @((item.NewPrice + item.Store.Threshold + item.Store.Threshold).ToString("N2"))
            </td>
            <td>
                @(((item.NewPrice + item.Store.Threshold + item.Store.Threshold)- (item.PreviousPrice + item.Store.Threshold + item.Store.Threshold)).ToString("N2")) @*is this supposed to be threshold or old v new*@
            </td>
            <td>
                @DateTime.Now
            </td>
            <td hidden>@(item.Grade1.GradeId = 3)</td>

        </tr>


        






    }

    </table>
<div style="padding-left: 43%">
    <button style="  background-color:red; color: white;">
        @Html.ActionLink("Add to database", "Create", "PriceChecker")
    </button>
</div>


<div style="padding-left: 43%; padding-top: 15px">

    <button class=" btn btn-primary" onclick="ConvertDatatableToXML" style="background-color:red; color:white">Export to XML</button>


    @*<button class="btn btn-primary" onclick="javascript: fnExcelReport('dataTable', 'data'">Export To Excel</button>*@
    
    @*onclick="ExportingAction()" style="background-color:red; color:white" id="Validate" type="button">
        
        <span class="glyphicon glyphicon-download"></span>
        <strong>Update and Export</strong>*@
    @*</button>*@
</div>











